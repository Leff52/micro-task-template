openapi: 3.0.3
info:
  title: Micro Task Template API
  version: 1.0.0
  description: Публичная спецификация API через Gateway
servers:
  - url: http://localhost:3000
    description: Local via API Gateway
tags:
  - name: users
  - name: orders
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      required: [success, error]
      properties:
        success: { type: boolean, const: false }
        error:
          type: object
          required: [code, message]
          properties:
            code: { type: string }
            message: { type: string }
    RegisterRequest:
      type: object
      required: [email, password, name]
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 6 }
        name: { type: string }
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 6 }
    LoginResponse:
      type: object
      required: [success, data]
      properties:
        success: { type: boolean, const: true }
        data:
          type: object
          required: [token]
          properties:
            token: { type: string }
    User:
      type: object
      required: [id, email, name, roles]
      properties:
        id: { type: string }
        email: { type: string, format: email }
        name: { type: string }
        roles:
          type: array
          items: { type: string }
    MeResponse:
      type: object
      required: [success, data]
      properties:
        success: { type: boolean, const: true }
        data: { $ref: '#/components/schemas/User' }
    UsersListResponse:
      type: object
      required: [success, data]
      properties:
        success: { type: boolean, const: true }
        data:
          type: array
          items: { $ref: '#/components/schemas/User' }
    OrderItem:
      type: object
      required: [sku, qty, price]
      properties:
        sku: { type: string }
        qty: { type: integer, minimum: 1 }
        price: { type: number, minimum: 0 }
    Order:
      type: object
      required: [id, userId, items, total, status, createdAt, updatedAt]
      properties:
        id: { type: string }
        userId: { type: string }
        items:
          type: array
          items: { $ref: '#/components/schemas/OrderItem' }
        total: { type: number, minimum: 0 }
        status:
          type: string
          enum: [created, processing, completed, cancelled]
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    OrdersListResponse:
      type: object
      required: [success, data, meta]
      properties:
        success: { type: boolean, const: true }
        data:
          type: array
          items: { $ref: '#/components/schemas/Order' }
        meta:
          type: object
          properties:
            page: { type: integer, minimum: 1 }
            limit: { type: integer, minimum: 1 }
            total: { type: integer, minimum: 0 }
    CreateOrderRequest:
      type: object
      required: [items, total]
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/OrderItem' }
          minItems: 1
        total: { type: number, minimum: 0 }
    CreateOrderResponse:
      type: object
      required: [success, data]
      properties:
        success: { type: boolean, const: true }
        data:
          type: object
          required: [id]
          properties:
            id: { type: string }

paths:
  /v1/users/register:
    post:
      tags: [users]
      summary: Регистрация пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RegisterRequest' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                required: [success, data]
                properties:
                  success: { type: boolean, const: true }
                  data:
                    type: object
                    required: [id]
                    properties:
                      id: { type: string }
        '409':
          description: Email exists
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /v1/users/login:
    post:
      tags: [users]
      summary: Логин
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LoginResponse' }
        '401':
          description: Bad credentials
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /v1/users/me:
    get:
      tags: [users]
      security: [{ bearerAuth: [] }]
      summary: Мой профиль
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/MeResponse' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    patch:
      tags: [users]
      security: [{ bearerAuth: [] }]
      summary: Обновить профиль
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '400':
          description: Bad request

  /v1/users:
    get:
      tags: [users]
      security: [{ bearerAuth: [] }]
      summary: Список пользователей (admin)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UsersListResponse' }
        '403':
          description: Forbidden
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /v1/orders:
    get:
      tags: [orders]
      security: [{ bearerAuth: [] }]
      summary: Список заказов (свои, admin — все)
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, default: 10 }
        - in: query
          name: sort
          schema: { type: string, example: createdAt:desc }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/OrdersListResponse' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    post:
      tags: [orders]
      security: [{ bearerAuth: [] }]
      summary: Создать заказ
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateOrderRequest' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CreateOrderResponse' }
        '400':
          description: Bad request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /v1/orders/{id}:
    get:
      tags: [orders]
      security: [{ bearerAuth: [] }]
      summary: Получить заказ по id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Order' }
        '403':
          description: Forbidden
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '404':
          description: Not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /v1/orders/{id}/status:
    patch:
      tags: [orders]
      security: [{ bearerAuth: [] }]
      summary: Обновить статус заказа
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [created, processing, completed, cancelled]
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '404':
          description: Not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
